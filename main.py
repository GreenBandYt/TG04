import asyncio
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from config import TOKEN
from keyboard import main_menu, links_menu, dynamic_menu

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≤–µ—Ç"
@router.message(lambda message: message.text == "ü§ó –ü—Ä–∏–≤–µ—Ç")
async def greet_user(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üòä")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞"
@router.message(lambda message: message.text == "üëã –ü–æ–∫–∞")
async def goodbye_user(message: Message):
    await message.answer(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {message.from_user.first_name}! üëã")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Å—ã–ª–∫–∏"
@router.message(lambda message: message.text == "üîó –°—Å—ã–ª–∫–∏")
async def show_links(message: Message):
    await message.answer("üîó –í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É:", reply_markup=links_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é"
@router.message(lambda message: message.text == "üéõÔ∏è –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é")
async def dynamic_menu_handler(message: Message):
    await message.answer("üéõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=dynamic_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û–ø—Ü–∏—è 1"
@router.callback_query(lambda callback: callback.data == "option_1")
async def option_1_handler(callback: CallbackQuery):
    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ üîπ –û–ø—Ü–∏—é 1 ‚úÖ")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û–ø—Ü–∏—è 2"
@router.callback_query(lambda callback: callback.data == "option_2")
async def option_2_handler(callback: CallbackQuery):
    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ üî∏ –û–ø—Ü–∏—é 2 ‚úÖ")
    await callback.answer()


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    dp.include_router(router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
